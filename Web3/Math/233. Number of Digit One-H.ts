// 问题描述
// 给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。

// 解题思路
// 这是一个数位统计问题，需要分析每一位上数字1出现的规律。我们可以逐位计算，对于第i位（从右向左，个位是第0位）：
// 将数字n拆分为：当前位的数字cur，高位部分high，低位部分low
// 根据cur的不同值，计算该位上1出现的次数
// 将所有位上1出现的次数相加
// TypeScript 实现

function countDigitOne(n: number): number {
    if (n <= 0) return 0;

    let count = 0;
    let base = 1; //当前位的基数： 1，10，100，1000，... 

    while (n >= base) {
        // let number to high, low, cur 将数字n拆分为高位、低位和当前位
        const high = Math.floor(n / (base * 10)); // 高位
        const cur = Math.floor((n / base) % 10); // 当前位
        const low = n % base; // 低位

        // 根据当前位cur的不同值，计算该位上1出现的次数
        if (cur === 0) {
            count += high * base;
        } else if (cur === 1) {
            // 如果当前位是1，则该位上1的出现次数取决于高位和低位
            count += high * base + low + 1;
        } else {
            // 如果当前位大于1，则该位上1的出现次数取决于高位+1
            count += (high + 1) * base;
        }

        // 更新基数，继续处理下一位
        base *= 10;
    }

    return count;
}

// 详细过程解析
// 让我以n = 2345为例，详细解释算法的工作流程：
// 个位（base = 1）：
// high = 234, cur = 5, low = 0
// cur > 1, 所以个位上1出现的次数是 (234 + 1) * 1 = 235
// 这表示在0-2345中，个位上数字1出现了235次


// 十位（base = 10）：
// high = 23, cur = 4, low = 5
// cur > 1, 所以十位上1出现的次数是 (23 + 1) * 10 = 240
// 这表示在0-2345中，十位上数字1出现了240次


// 百位（base = 100）：
// high = 2, cur = 3, low = 45
// cur > 1, 所以百位上1出现的次数是 (2 + 1) * 100 = 300
// 这表示在0-2345中，百位上数字1出现了300次


// 千位（base = 1000）：
// high = 0, cur = 2, low = 345
// cur > 1, 所以千位上1出现的次数是 (0 + 1) * 1000 = 1000
// 这表示在0-2345中，千位上数字1出现了1000次
// 总计：235 + 240 + 300 + 1000 = 1775
// 所以从0到2345的所有数中，数字1总共出现了1775次。


// 数学原理解释
// 为什么这个算法有效？让我们分析一下不同情况：
// 当前位为0：
// 例如n = 2304，考虑十位（cur = 0）
// 只有在0000-2299范围内的数的十位才可能是1
// 这个范围内，每增加100，十位上的1就会出现10次
// 所以十位上1出现的次数是 23 * 10 = 230次
// 当前位为1：
// 例如n = 2314，考虑十位（cur = 1）
// 在0000-2299范围内，十位上1出现 23 * 10 = 230次
// 在2300-2314范围内，十位上1出现 (14 + 1) = 15次
// 总计：230 + 15 = 245次
// 当前位大于1：
// 例如n = 2345，考虑十位（cur = 4）
// 在0000-2399范围内，十位上1出现 24 * 10 = 240次
// 在2400-2345范围内，十位上不会出现1
// 总计：240次
// 复杂度分析
// 时间复杂度：O(log n)，因为我们需要处理n的每一位，而一个数字n有log₁₀(n)位。
// 空间复杂度：O(1)，只使用了常数级别的额外空间。
// 总结
// 这个问题是一个经典的数位统计问题，需要我们分析每一位上数字1出现的规律。通过分解数字并分别计算每一位上1出现的次数，我们可以高效地解决这个问题。
// 这种解法比暴力枚举每个数字要高效得多，特别是当n很大时，暴力方法会超时。